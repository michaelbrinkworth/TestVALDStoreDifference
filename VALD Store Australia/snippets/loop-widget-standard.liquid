{% comment %}
	LOOP SUBSCRIPTIONS (https://apps.shopify.com/loop-subscriptions)

    DO NOT modify source code of this file because
	It is automatically generated from LOOP SUBSCRIPTIONS WIDGET DESIGN
	If you need to make change, please do it using our standard widget design settings or create a custom widget design in LOOP SUBSCRIPTIONS app.
{% endcomment %}

{% if product.selling_plan_groups.size > 0 %}

{%- liquid
 	assign current_variant = product.selected_or_first_available_variant | default: product.variants.first
-%}
<style class="loop-style">
    .loop-hidden {
        display: none;
    }
    .loop-full-width {
        width: 100% !important;
    }
  	.loop-subscription-container {
  		display: flex;
      	flex-direction: column;
  	}
    .loop-selling-plan-fieldset {
        padding: 0;
        margin: 15px 0;
        flex-basis: 100%;
        border-width: 0;
        border-style: groove;
        border-color: threedface;
        border-image: initial;
        border-radius: 0.5em;
        border: 1px solid #c3cfd9 !important;
        overflow: hidden !important;
    }
    .loop-selling-plan-fieldset-legend {
        display: none;
    }
    .loop-one-time-purchase-option-position {
        display: flex !important;
    }
    .loop-purchase-options-label {
        width: auto !important;
        flex: 2;
        padding: 0 !important;
        margin: 0 !important;
        font-size: 1.1em !important;
        line-height: 1.1em !important;
    }
    .loop-one-time-purchase-option {
        display: flex;
        align-items: center;
        width: 100% !important;
        padding: 1.1em !important;
    }
    .loop-one-time-purchase-option-radio {
        width: 1.2rem !important;
        height: 1.2rem !important;
        min-height: 1.2rem !important;
        position: initial !important;
        appearance: auto !important;
        line-height: 1.2rem !important;
        margin: 0 1rem 0 0 !important;
        padding: 0 !important;
    }
    .loop-one-time-purchase-option-label {
        width: auto !important;
        line-height: 1.2em !important;
        font-size: 1em !important;
        font-weight: 600 !important;
        flex: 2;
        padding: 0 !important;
        margin: 0 !important;
    }
    .loop-one-time-purchase-option-price-container {
        text-align: right;
      	flex: 1;
    }
    .loop-one-time-purchase-option-price-amount {
        line-height: 1.2em !important;
        font-size: 1em !important;
    }

    .loop-one-time-purchase-option-price-quantity {
        line-height: 1em !important;
        font-size: 0.8em !important;
      	opacity: 0.8;
    }

    .loop-selling-plan-allocation {
        display: flex !important;
    }

    .loop-subscription-group {
        display: flex;
        align-items: center;
        flex-wrap: wrap;
        padding: 1.1em !important;
    }
    .loop-subscription-group-border-top {
        border-top: 1px solid #c3cfd9 !important;
    }

    .loop-subscription-group-border-bottom {
        border-bottom: 1px solid #c3cfd9 !important;
    }
    .loop-subscription-group-radio {
        width: 1.2rem !important;
        height: 1.2rem !important;
        min-height: 1.2rem !important;
        line-height: 1.2rem;
        position: initial !important;
        appearance: auto !important;
        margin: 0 1rem 0 0 !important;
        padding: 0 !important;
    }
    .loop-subscription-group-text {
        display: flex;
        flex-wrap: wrap;
        flex: 3;
        align-items: center;
    }

    .loop-subscription-group-label {
        width: auto !important;
        padding: 0;
        margin: 0 1em 0 0;
        line-height: 1.2em !important;
        font-size: 1em !important;
        font-weight: 600 !important;
        display: flex;
        align-items: center;
    }
    .loop-subscription-group-discount-badge {
        border-radius: 50px;
        padding: 0.3em .8em;
        background: #53cf54;
        display: flex;
        justify-content: center;
        width: max-content;
        line-height: 1.2em;
        font-size: 1em;
    }

    .loop-subscription-group-price-container {
        text-align: right;
        flex: 1;
    }


    .loop-subscription-group-price-amount {
        line-height: 1.2em !important;
        font-size: 1em !important;
    }

    .loop-subscription-group-price-quantity {
        line-height: 1em !important;
        font-size: 0.8em !important;
      	opacity: 0.8;
    }


    .loop-subscription-group-selling-plans-container {
        display: flex;
        flex-wrap: wrap;
        align-items: center;
        width: 100% !important;
        margin-top: 0.5em;
        margin-left: 2.2rem;
    }

    .loop-selling-plan-selector-label {
        width: auto !important;
        padding: 0;
        margin: 0.5em 0 0.5em 0;
        line-height: 1.2em;
        font-size: 1em;
    }

    .loop-selling-plan-selector {
        width: auto!important;
        display: block !important;
        border-color: #C3D0D9 !important;
        border-width: 1px !important;
        margin: 6px 0 0 12px !important;
        padding: 0.5em 2.5em 0.5em 0.7em !important;
        border-radius: 5px !important;
        font-size: 1em !important;
        background-image: linear-gradient(45deg, transparent 50%, gray 50%),
          linear-gradient(135deg, gray 50%, transparent 50%),
          linear-gradient(to right, #ccc, #ccc);
        background-position: calc(100% - 20px) calc(1em), calc(100% - 15px) calc(1em), calc(100% - 2.5em) 0.5em;
        background-size: 5px 5px, 5px 5px, 0px 1.5em;
        background-repeat: no-repeat;
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
        -webkit-appearance: none;
        -moz-appearance: none;
    }

    .loop-selling-plan-selector:focus {
        background-image: linear-gradient(45deg, transparent 50%, gray 50%),
          linear-gradient(135deg, gray 50%, transparent 50%),
          linear-gradient(to right, #ccc, #ccc);
        background-position: calc(100% - 20px) calc(1em), calc(100% - 15px) calc(1em), calc(100% - 2.5em) 0.5em;
        background-size: 5px 5px, 5px 5px, 0px 1.5em;
        background-repeat: no-repeat;
        border-color: green;
        outline: 0;
        padding: 0.5em 2.5em 0.5em 0.7em !important;
    }

    .loop-selling-plan-selector:-moz-focusring {
        color: transparent;
        text-shadow: 0 0 0 #000;
    }

    .loop-selling-plan-selector-option {
        display: flex;
        align-items: center;
    }

    .loop-selling-plan-selector-description {
        width: 100%;
        font-size: 0.9em !important;
        line-height: normal !important;
        margin: 0 !important;
        padding: 0 !important;
        opacity: 0.8;
    }


    .loop-subscription-group-radio:not(:checked) ~ .loop-subscription-group-selling-plans-container {
        display: none !important;
    }

    .loop-selling-plan-selector:focus-visible {
        outline: none !important;
        outline-offset: 0.3rem;
        box-shadow: none !important;
    }


    .loop-price-container {
        display: flex;
        align-items: center;
        flex-direction: column;
    }
    .loop-price-section {
        width: 100%;
        display: flex;
        flex-direction: row;
    }
    .loop-price-section-subscription-banner {
        display: flex;
        align-items: center;
        font-size: 12px;
        padding: 0px 5px;
        border: 1px solid;
        border-radius: 5px;
        line-height: 11px;
        margin-left: 8px;
    }

    .loop-final-price {

    }

    .loop-compare-price {
        text-decoration: line-through;
        opacity: 0.5;
    }
    .loop-price-sub-text {
        font-size: 11px;
    }

    .loop-dot {
        height: 4px;
        width: 4px;
        background-color: #000;
        border-radius: 50%;
        display: inline-block;
        margin: 0 10px;
    }

    .loop-display-none {
        display: none !important;
    }

  	.loop-display-none-by-variant {
        display: none !important;
  	}

    .loop-left-margin-0 {
        margin-left: 0 !important;
    }

    .loop-tooltip {
        position: relative;
        display: flex;
        align-items: center;
        width: fit-content;
        padding-bottom: 1em;
        margin-top: -10px;
    }


    .loop-tooltip-label {
      display: flex;
      cursor: pointer;
    }
    .loop-tooltip-image {
        height: 18px;
        width: 18px;
        margin-right: 10px;
        display: flex;
        align-items: center;
    }

    .loop-tooltip .loop-tooltiptext {
        visibility: hidden;
        width: 300px;
        min-width: 100%;
        background-color: #081d33;
        color: #fff;
        text-align: left;
        border-radius: 6px;
        padding: 15px;
        margin-top: -10px;

        position: absolute;
        z-index: 1;
        top: 100%;
        left: 0%;
    }

    .loop-tooltip:hover .loop-tooltiptext {
        visibility: visible;
    }

    .loop-tooltip-description {
        margin: 0 !important;
        padding: 0 !important;
      	font-size: 1em;
    }

    .loop-container-arrow {
        height: 16px;
        width: 16px;
        background-color: #081d33;
        position: absolute;
    }

    .loop-container-arrow--tl {
        left: 32px;
        top: 0px;
        border-left: 1px solid rgba(0, 0, 0, 0.3);
        border-top: 1px solid rgba(0, 0, 0, 0.3);
        transform: translate(50%, -50%) rotate(45deg);
    }

</style>
<div id="loop-subscription-container-{{product.id}}" class="loop-subscription-container">
    <input type="hidden" name="selling_plan">
    <div id="loop-price-money-format" class="loop-hidden">{{ 000 | money }} each</div>
    <div id="loop-price-money_without_currency-format" class="loop-hidden">{{ 000 | money_without_currency }}</div>
    <input name="loop_variant_id" class="loop-hidden"></input>
    <div class="loop-purchase-options-label loop-display-none">Purchase Options</div>
  	<fieldset
        id="loop-selling-plan-fieldset"
        class="loop-selling-plan-fieldset loop-display-none"
    >
        <legend class="loop-selling-plan-fieldset-legend">Selling Plans</legend>
    	{% unless product.requires_selling_plan %}
        <div class="loop-one-time-purchase-option-position" id="loop-one-time-purchase-option-at-top">
    	    <div class="loop-one-time-purchase-option">
                <input type="radio" class="loop-one-time-purchase-option-radio" name="loop_purchase_option" id="loop-one-time-purchase-{{product.id}}" data-id="loop-one-time-purchase" data-product-id="{{ product.id }}" data-name="loop-one-time-purchase">
                <label class="loop-one-time-purchase-option-label" for="loop-one-time-purchase-{{product.id}}">One time Purchase</label>
                <div class="loop-one-time-purchase-option-price-container">
                    <div id="loop-price-one-time" class="loop-one-time-purchase-option-price-amount">
                        {{ current_variant.price | money }}
                    </div>
                    <div class="loop-one-time-purchase-option-price-quantity">
                        each
                    </div>
                </div>
            </div>
        </div>
    	{% endunless %}
        {% for variant in product.variants %}
            <div id="loop-product-variant-{{ variant.id }}">
                {% assign selected_selling_plan_group = nil %}
    	        {% for selling_plan_group in product.selling_plan_groups %}
                    {% unless selling_plan_group.app_id != "5284869" %}
                        <div id="loop-selling_plan_group-{{ selling_plan_group.id }}">
                            {% for allocation in variant.selling_plan_allocations %}
                            <div class="loop-selling-plan-allocation" id="loop-allocation-{{ allocation.selling_plan_group_id }}">
    	                        {% if selling_plan_group.id == allocation.selling_plan_group_id and selected_selling_plan_group != selling_plan_group.id %}
                                    {% assign selected_selling_plan_group = selling_plan_group.id %}
            	                    <div class="loop-full-width loop-subscription-group loop-subscription-group-border-top" id="loop-{{variant.id}}-{{selling_plan_group.id}}">
                                        <input type="radio" class="loop-subscription-group-radio" id="loop-radio-{{ variant.id }}{{selling_plan_group.id}}" name="loop_purchase_option" data-variant-id="{{variant.id}}"  data-product-id="{{product.id}}" data-id="{{selling_plan_group.id}}" data-name="{{selling_plan_group.name}}">
                                        <div class="loop-subscription-group-text">
                                            <label class="loop-subscription-group-label" for="loop-radio-{{ variant.id }}{{selling_plan_group.id}}">
                                                {{selling_plan_group.name}}
                                            </label>
                                            <div class="loop-subscription-group-discount-badge loop-display-none" id="loop-discount-badge-{{ variant.id }}-{{selling_plan_group.id}}">
                                            </div>
                                        </div>
                                        <div class="loop-subscription-group-price-container">
                                            <div id="loop-price-{{ variant.id }}-{{ selling_plan_group.id }}" class="loop-subscription-group-price-amount">
                                                {{ current_variant.price | money }}
                                            </div>
                                             <div class="loop-subscription-group-price-quantity">
                                                 each
                                            </div>
                                        </div>
                                        <div class="loop-subscription-group-selling-plans-container loop-full-width" id="loop-selling-plan-cantainer-{{variant.id}}-{{selling_plan_group.id}}">
            	                            <label class="loop-selling-plan-selector-label" for="loop-select-{{variant.id}}-{{selling_plan_group.id}}"> {{ selling_plan_group.selling_plans[0].options[0].name }}</label>
                                            <div id="loop-selling-plan-first-delivery-options-{{variant.id}}-{{selling_plan_group.id}}" class="loop-display-none"> &nbsp;{{ selling_plan_group.selling_plans[0].options[0].value }} </div>
            	                            <select class="loop-full-width loop-selling-plan-selector" id="loop-select-{{variant.id}}-{{selling_plan_group.id}}" data-position="{{ option.position }}" data-selling-plan-group-id="{{ selling_plan_group.id }}" data-product-id="{{product.id}}">
      	                                        {% for sp in selling_plan_group.selling_plans %}
                                            	    <option class="loop-selling-plan-selector-option" value="{{ sp.id }}">{{ sp.options[0].value }}</option>
      	                                        {% endfor %}
            	                            </select>
                                            <div class="loop-selling-plan-selector-description" id="loop-selling-plan-description-{{ variant.id }}-{{ selling_plan_group.id }}"></div>
              	                        </div>
                                    </div>
    	                        {% endif %}
                            </div>
                            {% endfor %}
                        </div>
                    {% endunless %}
                {% endfor %}
            </div>
        {% endfor %}
        {% unless product.requires_selling_plan %}
    	    <div class="loop-one-time-purchase-option-position" id="loop-one-time-purchase-option-at-bottom">
            </div>
    	{% endunless %}
    </fieldset>

    <div class="loop-tooltip loop-display-none" id="loop-tooltip">
        <div class="loop-tooltip-image">
            <svg
              width="18"
              height="18"
              viewBox="0 0 90 90"
              xmlns="http://www.w3.org/2000/svg"
              id="loop-tooltip-image-svg"
            >
                <path d="M45 0C20.1827 0 0 20.1827 0 45C0 69.8173 20.1827 90 45 90C69.8173 90 90 69.8174 90 45C90.0056 44.6025 89.9322 44.2078 89.7839 43.8389C89.6357 43.47 89.4156 43.1342 89.1365 42.8511C88.8573 42.568 88.5247 42.3432 88.158 42.1897C87.7912 42.0363 87.3976 41.9573 87 41.9573C86.6024 41.9573 86.2088 42.0363 85.842 42.1897C85.4753 42.3432 85.1427 42.568 84.8635 42.8511C84.5844 43.1342 84.3643 43.47 84.2161 43.8389C84.0678 44.2078 83.9944 44.6025 84 45C84 66.5748 66.5747 84 45 84C23.4253 84 6 66.5747 6 45C6 23.4254 23.4253 6 45 6C56.1538 6 66.3012 10.5882 73.4375 18H65.4062C65.0087 17.9944 64.614 18.0678 64.2451 18.2161C63.8762 18.3643 63.5405 18.5844 63.2573 18.8635C62.9742 19.1427 62.7494 19.4753 62.596 19.842C62.4425 20.2088 62.3635 20.6024 62.3635 21C62.3635 21.3976 62.4425 21.7912 62.596 22.158C62.7494 22.5247 62.9742 22.8573 63.2573 23.1365C63.5405 23.4156 63.8762 23.6357 64.2451 23.7839C64.614 23.9322 65.0087 24.0056 65.4062 24H79.8125C80.6081 23.9999 81.3711 23.6838 81.9337 23.1212C82.4963 22.5586 82.8124 21.7956 82.8125 21V6.59375C82.821 6.18925 82.7476 5.78722 82.5966 5.41183C82.4457 5.03644 82.2205 4.69545 81.9344 4.40936C81.6483 4.12327 81.3073 3.898 80.9319 3.7471C80.5565 3.5962 80.1545 3.52277 79.75 3.53125C79.356 3.53941 78.9675 3.62511 78.6067 3.78344C78.2458 3.94177 77.9197 4.16963 77.6469 4.45402C77.3741 4.73841 77.16 5.07375 77.0168 5.44089C76.8737 5.80803 76.8042 6.19977 76.8125 6.59375V12.875C68.6156 4.86282 57.3081 0 45 0ZM43.75 20.75C43.356 20.7582 42.9675 20.8439 42.6067 21.0022C42.2458 21.1605 41.9197 21.3884 41.6469 21.6728C41.3741 21.9572 41.16 22.2925 41.0168 22.6596C40.8737 23.0268 40.8042 23.4185 40.8125 23.8125V47.375C40.8116 47.7693 40.8883 48.16 41.0385 48.5246C41.1886 48.8892 41.4092 49.2207 41.6875 49.5L54.0938 61.9375C54.6573 62.5011 55.4217 62.8177 56.2188 62.8177C57.0158 62.8177 57.7802 62.5011 58.3438 61.9375C58.9073 61.3739 59.224 60.6095 59.224 59.8125C59.224 59.0155 58.9073 58.2511 58.3438 57.6875L46.8125 46.1875V23.8125C46.821 23.408 46.7476 23.006 46.5966 22.6306C46.4457 22.2552 46.2205 21.9142 45.9344 21.6281C45.6483 21.342 45.3073 21.1168 44.9319 20.9658C44.5565 20.8149 44.1545 20.7415 43.75 20.75Z"></path>
            </svg>
        </div>
        <div id="loop-tooltip-label" class="loop-tooltip-label">
        </div>
        <div class="loop-tooltiptext">
            <div class="loop-container-arrow loop-container-arrow--tl">&#8205;</div>
            <p id="loop-tooltip-description" class="loop-tooltip-description">
            </p>
        </div> 
    </div> 
</div>
<script>
    //Global functions

    getLoopSubscriptionContainer = (productId) => {
        let prod = {{ product | json }}
        let loopSubscriptionContainer = document.querySelector(`#loop-subscription-container-${productId || prod.id}`)
        return loopSubscriptionContainer
    }
    
    arrToInstanceCountObj = arr => arr.reduce((obj, e) => {
        obj[e] = (obj[e] || 0) + 1;
        return obj;
    }, {});

    function findSelectedVariantLoop(productId) {
        let selectedVariantId = null 
        let product = {}
        if(window.loopProps && window.loopProps[productId] && window.loopProps[productId].product) {
            product = window.loopProps[productId].product
        } else {
            product = {{ product | json }}
        }

        if(!selectedVariantId) {
            selectedVariantId = window.loopProps[productId].selectedVariantId
        }

        if(!selectedVariantId) {
            const { variants } = product
            if(variants && Array.isArray(variants) && variants.length) {
                selectedVariantId = variants[0].id
            }
        }

        let selectedVariant = product.variants && product.variants.find(variant => Number(variant.id) === Number(selectedVariantId))
        
        return selectedVariant;
    }

    function defaultSelectFirstSellingPlanLoop(variant, productId) {
        let notCheckedYet = true
        let loopPurchaseOptions = getLoopSubscriptionContainer(productId).querySelectorAll('input[name=loop_purchase_option]') || []
        loopPurchaseOptions.forEach(element => {
            if(Number(element.dataset.variantId) === Number(variant.id)) {
                if(notCheckedYet) {
                    notCheckedYet = false
                    element.checked = true
                    setTimeout(function () {
           			    element.click()
        			}, 300)
                }
            }
        })
    }

    function applySettings({ productId }) {
        let product = window.loopProps[productId].product
        const variant = findSelectedVariantLoop(productId)
        if(window && window.loopPropsUI && window.loopPropsUI.displayLoopPurchaseOptionLabel === false) {
            let elements = getLoopSubscriptionContainer(productId).querySelectorAll('.loop-purchase-options-label')
            if(elements) {
                elements.forEach(element => {
                    if(element) {
                        element.classList.add('loop-display-none')
                    }
                })
            }
        }
        
      	if(window && window.loopPropsUI && window.loopPropsUI.loopPurchaseOptionslabel) {
            let elements = getLoopSubscriptionContainer(productId).querySelectorAll('.loop-purchase-options-label')
            if(elements) {
                elements.forEach(element => {
                    if(element) {
                        element.innerHTML = `${ window.loopPropsUI.loopPurchaseOptionslabel || 'Purchase Options' }`
                    }
                })
            }
        }

        if(window && window.loopPropsUI && window.loopPropsUI.loopOneTimePurchaselabel) {
            let elements = getLoopSubscriptionContainer(productId).querySelectorAll('.loop-one-time-purchase-option-label')
            if(elements) {
                elements.forEach(element => {
                    if(element) {
                        element.innerHTML = `${ window.loopPropsUI.loopOneTimePurchaselabel || 'One time Purchase' }`
                    }
                })
            }
        }

        if(window && window.loopPropsUI && window.loopPropsUI.displayOneTimePurchaseOptionAtBottom) {
            let elementAtTop = getLoopSubscriptionContainer(productId).querySelector('#loop-one-time-purchase-option-at-top')
            let elementAtBottom = getLoopSubscriptionContainer(productId).querySelector('#loop-one-time-purchase-option-at-bottom')
            if(elementAtTop && elementAtBottom) {
                if(elementAtTop.innerHTML) {
                    elementAtBottom.innerHTML = elementAtTop.innerHTML
                    elementAtTop.innerHTML = ``
                }
            }

            let loopSubscriptionGroupElement = getLoopSubscriptionContainer(productId).querySelectorAll('.loop-subscription-group')
            if(loopSubscriptionGroupElement) {
                loopSubscriptionGroupElement.forEach(element => {
                    element.classList.remove('loop-subscription-group-border-top')
                    element.classList.add('loop-subscription-group-border-bottom')
                })
            }

          	const loopOneTimeOptions = getLoopSubscriptionContainer().querySelectorAll('.loop-one-time-purchase-option')
    		loopOneTimeOptions.forEach(option => {
        		option.addEventListener('click', clickOnSellingPlanGroupContainer)
    		})
            const loopPurchaseOptions = getLoopSubscriptionContainer(productId).querySelectorAll('input[name=loop_purchase_option]')
            loopPurchaseOptions.forEach(option => {
                option.addEventListener('click', changeInSellingPlanGroupLoop)
             })
        }

      	if(window && window.loopPropsUI && window.loopPropsUI.displayEachLabelForPrice === false) {
            let loopSubscriptionOnPriceEachLabel = document.querySelectorAll('.loop-subscription-group-price-quantity')
            if(loopSubscriptionOnPriceEachLabel) {
                loopSubscriptionOnPriceEachLabel.forEach(element => {
                    element.classList.add('loop-display-none')
                })
            }

            let loopOneTimePurchaseOnPriceEachLabel = document.querySelectorAll('.loop-one-time-purchase-option-price-quantity')
            if(loopOneTimePurchaseOnPriceEachLabel) {
                loopOneTimePurchaseOnPriceEachLabel.forEach(element => {
                    element.classList.add('loop-display-none')
                })
            }
        }

        if(window && window.loopPropsUI && window.loopPropsUI.hidePlanSelectorIfOnlyOne) {
            const { availableSellingPlanAllocations = [] } = window.loopProps[productId]
            let ids = []
            availableSellingPlanAllocations.map(a => {
                ids.push(a.selling_plan_group_id)
            })

            let idCount = arrToInstanceCountObj(ids)
            Object.keys(idCount).forEach(key => {
                let plan = idCount[key]
                if(plan === 1) {
                    let id = `#loop-selling-plan-cantainer-${variant.id}-${key}`
                    let parentElement = document.querySelector(id)
                    if(parentElement) {
                        let label = parentElement.querySelector('.loop-selling-plan-selector-label')
                        let labelPlan = parentElement.querySelector(`#loop-selling-plan-first-delivery-options-${variant.id}-${key}`)
                        let planSelector = parentElement.querySelector('.loop-selling-plan-selector')
                        if(label) {
                            label.classList.add('loop-display-none')
                        } 
                        if(labelPlan) {
                            labelPlan.classList.add('loop-display-none')
                        }
                        if(planSelector) {
                            planSelector.classList.add('loop-display-none')
                        }
                        
                    }
                }

            })
        }

        if(window && window.loopPropsUI && window.loopPropsUI.showPlanSelectorAsTextIfOnlyOnePlan && !window.loopPropsUI.hidePlanSelectorIfOnlyOne) {
            const { availableSellingPlanAllocations = [] } = window.loopProps[productId]
            let ids = []
            availableSellingPlanAllocations.map(a => {
                ids.push(a.selling_plan_group_id)
            })

            let idCount = arrToInstanceCountObj(ids)
            Object.keys(idCount).forEach(key => {
                let plan = idCount[key]
                if(plan === 1) {
                    let id = `#loop-selling-plan-first-delivery-options-${variant.id}-${key}`
                    let element = document.querySelector(id)
                    if(element && element.classList) {
                        element.classList.remove('loop-display-none')
                    }
                    id = `#loop-select-${variant.id}-${key}`
                    element = document.querySelector(id)
                    if(element) {
                        element.classList.add('loop-display-none')
                    }

                }

            })
        }

        if(window && window.loopPropsUI && window.loopPropsUI.hideWholeWidgetIfOnlyOnePlan) {
            if(product.requires_selling_plan) { //check if only for selling plan
                if(variant.selling_plan_allocations && variant.selling_plan_allocations.length === 1) { //has only 1 selling plan

                    let loopSubscriptionWidget = getLoopSubscriptionContainer(productId).querySelector('#loop-selling-plan-fieldset')
                    if(loopSubscriptionWidget) {
                        loopSubscriptionWidget.classList.add('loop-display-none')
                    }
                    let elements = getLoopSubscriptionContainer(productId).querySelectorAll('.loop-purchase-options-label')
                    if(elements) {
                        elements.forEach(element => {
                            if(element) {
                                element.classList.add('loop-display-none')
                            }
                        })
                    }

                }
            }
        }

        if(window && window.loopPropsUI && window.loopPropsUI.hideRadioButtonIfOnlyOnePlan) {
            if(product.requires_selling_plan) { //check if only for selling plan

                const { availableSellingPlanAllocations } = window.loopProps[productId]
                let ids = []
                availableSellingPlanAllocations.map(a => {
                    ids.push(a.selling_plan_group_id)
                })
                let idCount = arrToInstanceCountObj(ids)
                let onlyOneSellingPlanGroup = false
                if(Object.keys(idCount).length === 1) {
                    onlyOneSellingPlanGroup = true
                } else {
                    onlyOneSellingPlanGroup = false
                }

                if(onlyOneSellingPlanGroup) { //has only 1 selling plan

                    let loopSubscriptionGroupRadio = getLoopSubscriptionContainer(productId).querySelectorAll('.loop-subscription-group-radio')
                    if(loopSubscriptionGroupRadio) {
                        loopSubscriptionGroupRadio.forEach(element => {
                            element.classList.add('loop-display-none')
                        })
                    }
                    let elements = getLoopSubscriptionContainer(productId).querySelectorAll(`.loop-subscription-group-selling-plans-container`)
                    if(elements) {
                        elements.forEach(element => {
                            element.classList.add('loop-left-margin-0')
                        })
                    }
                }
            }
        }


        if(window && window.loopPropsUI && window.loopPropsUI.style) {
            let classList = {
                'purchase_option_label': ['.loop-purchase-options-label'],
                'widget_feildset': ['.loop-selling-plan-fieldset'],
                'selling_plan_group_container': ['.loop-one-time-purchase-option', '.loop-subscription-group'],
                'selling_plan_group_label': ['.loop-one-time-purchase-option-label', '.loop-subscription-group-label'],
                'selling_plan_label': ['.loop-selling-plan-selector-label'],
                'selling_plan_selector': ['.loop-selling-plan-selector'],
                'selling_plan_price_label': ['.loop-one-time-purchase-option-price-amount','.loop-subscription-group-price-amount'],
                'selling_plan_price_subtitle_label': ['.loop-one-time-purchase-option-price-quantity', '.loop-subscription-group-price-quantity'],
                'selling_plan_description_label': ['.loop-selling-plan-selector-description'],
                'selling_plan_discount_badge_style':['.loop-subscription-group-discount-badge'],
                'subscription_details_label': ['.loop-tooltip-label'],
                'subscription_details_popup':['.loop-tooltiptext', '.loop-container-arrow', '.loop-tooltip-description'],
                'selling_plan_group_selected': ['.loop-selected-selling-plan-group'],
      			'selling_plan_group_radio': ['.loop-subscription-group-radio', '.loop-one-time-purchase-option-radio'],
            
            }
            const getProperties = ({ id, data }) => {
                if(data) {
                    let keys =  Object.keys(data)
                    let properties = ''
                    keys.forEach(key => {
                        let value = data[key]
                        properties = `${properties} ${key}: ${value} !important;`
                    })
                    return properties
                } else {
                    return ''
                }
            }
            const getClassName = ({ id, data }) => {
                return classList[id] || []
            }

            let extraClasses = ``
            const { style } = window.loopPropsUI
            style.map(st => {
                let classNames = getClassName(st)
                classNames.map(className => {

                    extraClasses = extraClasses + `
                        ${className} {
                            ${getProperties(st)}
                        }
                    `
                })
            })



            let loopStyles = document.querySelectorAll('.loop-style')
            if(loopStyles) {
                loopStyles.forEach(element => {
                    element.innerHTML = `${element.innerHTML}
                        ${extraClasses}
                    `
                })
            }
        }

      	if(window && window.loopPropsUI && window.loopPropsUI.cssClassess ) {
            let loopStyles = document.querySelectorAll('.loop-style')
            if(loopStyles) {
                loopStyles.forEach(element => {
                    element.innerHTML = `${element.innerHTML}
                        ${window.loopPropsUI.cssClassess}
                    `
                })
            }
        }


        if(window && window.loopPropsUI && window.loopPropsUI.displaySubscriptionPopup && variant && variant.selling_plan_allocations && variant.selling_plan_allocations.length) {
            let element = getLoopSubscriptionContainer(productId).querySelector('#loop-tooltip') 
            if(element) {
                element.classList.remove('loop-display-none')
                let label = getLoopSubscriptionContainer(productId).querySelector('#loop-tooltip-label')
                if(label) {
                    label.innerHTML = window.loopPropsUI.subscriptionPopupLabel
                }
                let description = getLoopSubscriptionContainer(productId).querySelector('#loop-tooltip-description')
                if(description) {
                    description.innerHTML = window.loopPropsUI.subscriptionPopupDescription
                }
                if(label && description) {
                    label.style.fill = window.getComputedStyle(description).color
                }
                 
            }
        } else {
            let element = getLoopSubscriptionContainer(productId).querySelector('#loop-tooltip') 
            if(element) {
                element.classList.add('loop-display-none')
            }
        }

        if(product && product.requires_selling_plan && Array.isArray(variant.selling_plan_allocations) && variant.selling_plan_allocations.length) {
			let parentId = `#loop-product-variant-${variant.id}` 
            let parentElement = getLoopSubscriptionContainer(productId).querySelector(parentId)
                
          	if(window && window.loopPropsUI && window.loopPropsUI.displayOneTimePurchaseOptionAtBottom) {
            	let lastGroup = variant.selling_plan_allocations[variant.selling_plan_allocations.length - 1]
                let id = `.loop-subscription-group`
                
                let elements = parentElement.querySelectorAll(id)
                if(elements && elements.length) {
                    let last = elements[elements.length - 1]
                    last.style.borderBottom = '0'
                    last.classList.remove('loop-subscription-group-border-bottom')
                }
                
            } else {
                let firstGroup = variant.selling_plan_allocations[0]
              	let id = `.loop-subscription-group`
                let elements = parentElement.querySelectorAll(id)
 				if(elements && elements.length) {
                    let first = elements[0]
                    first.style.borderTop = '0'
                    first.classList.remove('loop-subscription-group-border-top')
                }

            }
        }

        if(window && window.loopPropsUI && window.loopPropsUI.displayDiscountBadge) {
            displayDiscountBadge({ productId })
        } else {
            let loopSubscriptionDiscountBadge = document.querySelectorAll('.loop-subscription-group-discount-badge')
            if(loopSubscriptionDiscountBadge) {
                loopSubscriptionDiscountBadge.forEach(element => {
                    if(element) {
                        element.classList.add('loop-display-none')
                    }
                })
            }
        }

        if(window && window.loopPropsUI && window.loopPropsUI.translationData) {
            let translationData = window.loopPropsUI.translationData || {}
            let mapElements = {
                widget_price_label_text: ['.loop-one-time-purchase-option-price-quantity', '.loop-subscription-group-price-quantity']
            }

            Object.keys(mapElements).forEach(key => {
                if(translationData && translationData[key]) {
                    let elementIds = mapElements[key]
                    elementIds.map(id => {
                        let elements = document.querySelectorAll(id)
                        if(elements) {
                            elements.forEach(element => {
                                element.innerText = translationData[key]
                            })
                        }
                    })

                }
            })
        }
    }

    
    function clickOnSellingPlanGroupContainer(event) {
        let container = event.target.closest('.loop-subscription-group')
        let radio = null
        if(!container) {
            container = event.target.closest('.loop-one-time-purchase-option')
        }
        radio = container.querySelector('input[type="radio"]')
        if(radio?.dataset?.id !== window.loopProps[radio.dataset.productId].sellingPlanGroupId) {
        	radio.click()
        }
    }

    async function getLoopSettingsData() {
        let loopProduct = {{ product | json }}
        if(!window.loopProps) {
            window.loopProps = {}
        }
        if(loopProduct?.selling_plan_groups && Array.isArray(loopProduct.selling_plan_groups)) {
        	loopProduct.selling_plan_groups = loopProduct.selling_plan_groups.filter(s => s.app_id === "5284869")
        }

        let sids = loopProduct.selling_plan_groups.map(s => s.id)
           
        loopProduct.variants = loopProduct.variants.map(variant => {
           return {
           		...variant,
           		selling_plan_allocations: variant.selling_plan_allocations.filter(s => sids.includes(s.selling_plan_group_id))
			}
        })
        
        window.loopProps[loopProduct.id] = {
            product: loopProduct
        }

        try {
            let data = {}
            try {
                let response = await fetch(`https://d217z8zw4dqir.cloudfront.net/${Shopify.shop}.json`)
                data = await response.json() || {}
            } catch (e) {
                console.log(e)
            }
            window.loopPropsUI = {
                ...data
            }
            
            let loopSubscriptionWidget = getLoopSubscriptionContainer(loopProduct.id).querySelector('#loop-selling-plan-fieldset')
            if(loopSubscriptionWidget) {
                loopSubscriptionWidget.classList.remove('loop-display-none')
            } 

            let elements = getLoopSubscriptionContainer(loopProduct.id).querySelectorAll('.loop-purchase-options-label')
            if(elements) {
                elements.forEach(element => {
                    if(element) {
                        element.classList.remove('loop-display-none')
                    }
                })
            }

            let variantId = null
            const currentPageUrl = document.URL;
            const url = new URL(currentPageUrl);
            let variantIdFromUrl = url.searchParams.get("variant") || '';
            let allVariantId = loopProduct?.variants.map(v => v.id) || []

            if(allVariantId.includes(Number(variantIdFromUrl))) {
                variantId = variantIdFromUrl
            }

            loopInit({ productId: loopProduct.id, product: JSON.parse(JSON.stringify(loopProduct)), variantId })

            let loopWidget = getLoopSubscriptionContainer(loopProduct.id)
            if(loopWidget) {
                loopWidget.classList.remove('loop-display-none')
            }
        } catch (e) {
            console.log(e)
        }

        try {
            document.querySelectorAll('form').forEach(form => {
                let variantElement = form.querySelector('[name="id"]')
                let loopVariantElement = form.querySelector('[name="loop_variant_id"]')
                if(variantElement && loopVariantElement && variantElement.value) {
                    loopVariantElement.value = variantElement.value
                }
                let allVariantsId = loopProduct?.variants.map(v => v.id)
                if(variantElement && variantElement.value && allVariantsId.includes(Number(variantElement.value))) {
                    
                    const config = { attributes: true, childList: true, subtree: true };

                    const callback = function(mutationsList, observer) {
                        let variantId = variantElement?.value || ''
                        let loopVariantElementId = loopVariantElement?.value || ''
                        if(variantId && variantId !== loopVariantElementId) {
                            loopVariantElement.value = variantId
                            variantChanged({ loopProduct, variantId })
                        }
                    };

                    const observer = new MutationObserver(callback);

                    observer.observe(form, config);
                }
            })

        } catch (e) {
            console.log(e)
        }
        
    }

    (async () => {
        getLoopSettingsData()
    })()


    loopPriceSelectors = [
		'.price:not(.price--on-sale) .price__regular .price-item--regular',
	    '.price.price--on-sale .price__sale .price-item--sale',
	    '.product-single__prices .product__price:not(.product__price--compare)',
	    '.product-pricing .product--price .price--main .money',
	    '[data-zp-product-discount-price]',
	    '.product-single__header .product__price',
	    '.modal_price .current_price',
	    '.product-area__col--price .current-price.theme-money',
	    '[data-product-type="price"][data-pf-type="ProductPrice"]',
	    '.product__price .fs-heading-4-base[data-price]',
	    '#product-price .money[data-product-price]',
	    '#ProductPrice',
      	'.product-single__price',
		'.price:not(.price--on-sale) span.price-item--regular',
		'.product-price .price .money:not(.original)',
		'.price-box #price .price',
		'.product__price span[data-product-price]',
		'.product-form--price-wrapper .product-form--price',
		'.product-page--pricing--variant-price #price-field',
		'.price-reviews .product-price'
	];

    //Global Functions ends
    loopOneTimeOptions = getLoopSubscriptionContainer().querySelectorAll('.loop-one-time-purchase-option')
    loopOneTimeOptions.forEach(option => {
        option.addEventListener('click', clickOnSellingPlanGroupContainer)
    })
                        
    loopSellingPlanGroupOptions = getLoopSubscriptionContainer().querySelectorAll('.loop-subscription-group')
    loopSellingPlanGroupOptions.forEach(option => {
        option.addEventListener('click', clickOnSellingPlanGroupContainer)
    })


    loopPurchaseOptions = getLoopSubscriptionContainer().querySelectorAll('input[name=loop_purchase_option]')
    loopPurchaseOptions.forEach(option => {
        option.addEventListener('click', changeInSellingPlanGroupLoop)
    })

    loopDeliveryOptions = getLoopSubscriptionContainer().querySelectorAll('.loop-selling-plan-selector')
    loopDeliveryOptions.forEach(option => {
        option.addEventListener('change', changeInDeliveryOptionLoop)
    })

    function variantChanged({ loopProduct, variantId }) {
        loopInit({ productId: loopProduct.id, product: JSON.parse(JSON.stringify(loopProduct)), variantId })
    }
    
    function checkVariantsSellingPlanAllocation (variant, productId) {

        if(!variant || !Array.isArray(variant.selling_plan_allocations ) || !variant.selling_plan_allocations .length) {
        	//hide loop widget

          	let loopSubscriptionWidget = getLoopSubscriptionContainer(productId).querySelector('#loop-selling-plan-fieldset')
            if(loopSubscriptionWidget) {
            	loopSubscriptionWidget.classList.add('loop-display-none-by-variant')
            }
            let elements = document.querySelectorAll('.loop-purchase-options-label')
            if(elements) {
            	elements.forEach(element => {
                    if(element) {
                    	element.classList.add('loop-display-none-by-variant')
                	}
            	})
            }
        } else {
        	//display loop widget
			let loopSubscriptionWidget = getLoopSubscriptionContainer(productId).querySelector('#loop-selling-plan-fieldset')
            if(loopSubscriptionWidget) {
            	loopSubscriptionWidget.classList.remove('loop-display-none-by-variant')
            }
            let elements = getLoopSubscriptionContainer(productId).querySelectorAll('.loop-purchase-options-label')
            if(elements) {
            	elements.forEach(element => {
                    if(element) {
                    	element.classList.remove('loop-display-none-by-variant')
                	}
            	})
            }
        }

    }

    function loopInit({ productId, product, variantId }) {
        updateLoopProperties({
            product,
            productId,
            variantId: variantId
        })

        const variant = findSelectedVariantLoop(productId, variantId)

        let vId = variant.id
        product.variants.map(variant => {
            if(variant.id == vId) {
                document.querySelector(`#loop-product-variant-${variant.id}`).style.display = 'block';
            } else {
                document.querySelector(`#loop-product-variant-${variant.id}`).style.display = 'none';
            }
        })


        checkVariantsSellingPlanAllocation(variant, productId)
        
        
        if(window && window.loopPropsUI && window.loopPropsUI.byDefaultChooseSubscriptionOption) {
            defaultSelectFirstSellingPlanLoop(variant, productId)
        } else {
            const onetimeCheckRadioLoop = getLoopSubscriptionContainer(productId).querySelector(`#loop-one-time-purchase-${productId}`)
            if(onetimeCheckRadioLoop) {
               onetimeCheckRadioLoop.checked = true
               onetimeCheckRadioLoop.click()
            } else {
               defaultSelectFirstSellingPlanLoop(variant, productId)
            }
        }
      	applySettings({ productId })
    }
 

    function updateSelectDropDownDefaultValues ({ productId, variant, sellingPlanGroupId }) {
        const { selling_plan_groups } = window.loopProps[productId].product
        if(selling_plan_groups && Array.isArray(selling_plan_groups) && selling_plan_groups.length) {
            selling_plan_groups.map(spg => {
                if(sellingPlanGroupId !== spg.id) {
                    let selectTag = document.getElementById(`loop-select-${variant.id}-${spg.id}`);
                    if(selectTag) {
                        selectTag.options[0].selected=true;
                    }
                }
            })
        }
    }

    function changeInSellingPlanGroupLoop(option) {
        let sellingPlanGroupId = option.target.dataset.id
        let sellingPlanGroupName = option.target.dataset.name
        let productId = option.target.dataset.productId
        const variant = findSelectedVariantLoop(productId, window.loopProps[productId].selectedVariantId)
        let sellingPlans = variant.selling_plan_allocations.filter(spa => spa.selling_plan_group_id === sellingPlanGroupId) || []
        let sellingPlan = sellingPlans && sellingPlans.length ? sellingPlans[0] : {}
        let sellingPlanId = sellingPlan.selling_plan_id
        updateLoopProperties({
            productId,
            variantId: variant.id,
            sellingPlanGroupId,
            sellingPlanGroupName,
            sellingPlanId,
            sellingPlan
        })
        updateSelectDropDownDefaultValues({ productId, variant, sellingPlanGroupId: option.target.dataset.id })
        updatePriceInParentElements({ productId })
        updateSellingPlanDescriptionUI({ productId })
        displayDiscountBadge({ productId })
        updateCartButtonText({ productId })
        updatePriceInUI({ productId })

        let removeElementId = '.loop-selected-selling-plan-group'
        let elements = getLoopSubscriptionContainer(productId).querySelectorAll(removeElementId)
        if(elements) {
          elements.forEach(element => {
             if(element) {
                element.classList.remove('loop-selected-selling-plan-group')
             }
          })
        }
        if(sellingPlanGroupId === 'loop-one-time-purchase') {
          	let elements = getLoopSubscriptionContainer(productId).querySelectorAll('.loop-one-time-purchase-option')
        	if(elements) {
              	elements.forEach(element => {
					element.classList.add('loop-selected-selling-plan-group')
				})
					
			}
      
        } else {
          	let elementId = `#loop-${variant.id}-${sellingPlanGroupId}` 
        	let element = getLoopSubscriptionContainer(productId).querySelector(elementId)
        	if(element) {
        		element.classList.add('loop-selected-selling-plan-group')
			}
          
        }
    }

    function changeInDeliveryOptionLoop(option) {
        let sellingPlanId = option.target.value
        let productId = option.target.dataset.productId
        updateLoopProperties({
            productId,
            sellingPlanId
        })
        updatePriceInParentElements({ productId })
        updateSellingPlanDescriptionUI({ productId })
        displayDiscountBadge({ productId })
        updatePriceInUI({ productId })

    }

    function displayDiscountBadge ({ productId }) {
        const variant = findSelectedVariantLoop(productId)
        const { selling_plan_groups } = window.loopProps[productId].product
        if(window && window.loopProps && window.loopPropsUI.displayDiscountBadge) {
            selling_plan_groups.map(spg => {
                const { selling_plans } = spg
                let discountList = []
                selling_plans.map(sp => {
                    const { price_adjustments } = sp
                    let priceAdj = price_adjustments.length ? price_adjustments[0] : {}
                    discountList.push({
                        value: priceAdj.value, 
                        value_type: priceAdj.value_type, 
                        amount: priceAdj.value_type === "fixed_amount" ? priceAdj.value : ((Number(variant.price) * priceAdj.value / 100))
                    })
                })
                let selectedDiscount = discountList.reduce((prev, current) => (prev.amount > current.amount) ? prev : current)
                let id = `#loop-discount-badge-${variant.id}-${spg.id}`
                let element = getLoopSubscriptionContainer(productId).querySelector(id)

                if(window.loopProps[productId] && spg.id === window.loopProps[productId].sellingPlanGroupId) {
                    let ssp = selling_plans.find(sp => sp.id === Number(window.loopProps[productId].sellingPlanId)) || {}
                    selectedDiscount = ssp.price_adjustments[0]
                }
                if(element) {
                    let discountText = ''
                    if(selectedDiscount && selectedDiscount.value_type === 'fixed_amount') {
                        discountText = loopFormatMoney(selectedDiscount.value, true)
                    } else if(selectedDiscount && selectedDiscount.value_type === 'percentage') {
                        discountText = `${selectedDiscount.value}%`
                    }

                    let text = window?.loopPropsUI?.discountBadgeText || ' '
                    let matchText = '{{discount_value}}'
                    let discountLabelText = text.replace(`{discount_value}`, discountText);
                    element.innerHTML = `${discountLabelText}`
                    if(!selectedDiscount?.value && !Number(selectedDiscount?.value)) {
                        element.classList.add('loop-display-none')
		    		} else {
		    			element.classList.remove('loop-display-none')
		    		}

                }
            })

        } else {
            selling_plan_groups.map(spg => {
                let id = `#loop-discount-badge-${variant.id}-${spg.id}`
                let element = document.querySelector(id)
                if(element) {
                    element.classList.add('loop-display-none')
                }
            })
        }
    }

    function calculateCurrentSellingPlanLoop ({ productId, availableSellingPlanAllocations }) {
        let sellingPlan = {}
        const { sellingPlanId } = window.loopProps[productId]
        for (let i = 0; i < availableSellingPlanAllocations.length; i++) {
            const tempSellingPlan = availableSellingPlanAllocations[i];

            if(tempSellingPlan.selling_plan_group_id === window.loopProps[productId].sellingPlanGroupId) {
                if(sellingPlanId) {
                    if(Number(tempSellingPlan.selling_plan_id) === Number(sellingPlanId)) {
                        sellingPlan = tempSellingPlan
                    }
                } else if(!sellingPlan || !sellingPlan.selling_plan_id){
                    sellingPlan = tempSellingPlan
                }
            }
        }
        
        return sellingPlan
    }

    function updateLoopProperties({ product, productId, variantId, sellingPlanGroupId, sellingPlanGroupName, sellingPlanId }) {
        let loopProperties = getLoopSubscriptionContainer(productId).querySelector("#loop-selling-plan-fieldset");
        if(variantId) {
            if(Number(variantId) !== Number(loopProperties.dataset.selectedVariantId)) {
                loopProperties.dataset.sellingPlanGroupId = ''
                loopProperties.dataset.sellingPlanGroupName = ''
                loopProperties.dataset.sellingPlanId = ''
            }
            loopProperties.dataset.selectedVariantId = variantId
        }

        if(sellingPlanGroupId) {
            loopProperties.dataset.sellingPlanGroupId = sellingPlanGroupId
        }
        if(sellingPlanGroupName) {
            loopProperties.dataset.sellingPlanGroupName = sellingPlanGroupName
        }

        if(product) {
            loopProperties.dataset.product = JSON.stringify(product)
        }

        if(sellingPlanId) {
            loopProperties.dataset.sellingPlanId = sellingPlanId
        } else if(sellingPlanGroupId === 'loop-one-time-purchase') {
            loopProperties.dataset.sellingPlanId = ''
            loopProperties.dataset.sellingPlan = {}
            loopProperties.dataset.sellingPlan = {}
        }
        if(!window.loopProps) {
            window.loopProps = {  }
            window.loopProps[productId] = { product, productId }
        }
        window.loopProps[productId] = { ...loopProperties.dataset,  productId }
        if(loopProperties.dataset && loopProperties.dataset.product) {
            window.loopProps[productId] = {
                ...window.loopProps[productId],
                product: JSON.parse(window.loopProps[productId].product)
            }
        }

        let variant = findSelectedVariantLoop(productId)
        let availableSellingPlanAllocations = variant && Array.isArray(variant.selling_plan_allocations) ? variant.selling_plan_allocations : []
        window.loopProps[productId].availableSellingPlanAllocations = availableSellingPlanAllocations
        window.loopProps[productId].variant = variant
        
        let sellingPlan = calculateCurrentSellingPlanLoop({ availableSellingPlanAllocations, productId });
        let selectedSellingPlanId = sellingPlan.selling_plan_id || '';
        window.loopProps[productId].sellingPlan = sellingPlan

        let sellingPlanAllocation = availableSellingPlanAllocations.find(aspa => {
            if(selectedSellingPlanId) {
                if(Number(aspa.selling_plan_id) === Number(selectedSellingPlanId)) {
                    return true
                }
            }
        })
        window.loopProps[productId].sellingPlanAllocation = sellingPlanAllocation

        const { selling_plan_groups } = window.loopProps[productId].product
        window.loopProps[productId].sellingPlanDefination = {}
        window.loopProps[productId].sellingPlanPriceAdjustments = []
        if(selling_plan_groups && Array.isArray(selling_plan_groups)) {
            selling_plan_groups.map(spg => {
                if(spg.id === window.loopProps[productId].sellingPlanGroupId) {
                    const { selling_plans } = spg
                    selling_plans.map(sp => {
                        if(sp.id === Number(window.loopProps[productId].sellingPlanId)) {
                            window.loopProps[productId].sellingPlanDefination = sp
                            window.loopProps[productId].sellingPlanPriceAdjustments = sp.price_adjustments
                        }
                    })
                }
            })
        }

        let sellingPlanRadio = getLoopSubscriptionContainer(productId).querySelector('[name="selling_plan"]')
        if(sellingPlanRadio) {
            sellingPlanRadio.value = selectedSellingPlanId;
        }

    }

    function updateCartButtonText({ productId }) {
        let parentElement = document.querySelector(`#product_form_${productId}`) || document
      	let oneTimeOrder = !window.loopProps || !window.loopProps[productId] || !window.loopProps[productId].sellingPlanGroupId || window.loopProps[productId].sellingPlanGroupId === 'loop-one-time-purchase'
        let addToCartButtonSelector = [
            "button[type='submit'][name='add']",
            "button[type='button'][name='add']"
        ]
        let addToCart = null
        addToCartButtonSelector.map(element => {
            if(!addToCart) {
                addToCart = parentElement.querySelector(element);
            }
        })
        
        if(addToCart && addToCart.firstElementChild) {
            if(!oneTimeOrder) {
                addToCart.firstElementChild.innerHTML = window?.loopPropsUI?.translationData?.widget_add_to_cart_button_for_subscription || "Add subscription to cart";
            } else {
                addToCart.firstElementChild.innerHTML = window?.loopPropsUI?.translationData?.widget_add_to_cart_button_for_one_time_purchase || "Add to cart";
            }
        } else {
          if (addToCart){
            if(!oneTimeOrder) {
                addToCart.innerHTML = window?.loopPropsUI?.translationData?.widget_add_to_cart_button_for_subscription || "Add subscription to cart";
            } else {
                addToCart.innerHTML = window?.loopPropsUI?.translationData?.widget_add_to_cart_button_for_one_time_purchase || "Add to cart";
            }
          }
        }
    }

    function loopFormatMoney (price, removeEach) {
        let moneyFormat = document.querySelector('#loop-price-money-format').innerText
		let moneyWithOutCurrency = document.querySelector('#loop-price-money_without_currency-format').innerText
        
        let format = ''
        if(moneyFormat.includes("0.00")) {
            format = moneyFormat.replace("0.00", (price/ 100).toFixed(2))
        } else if(moneyFormat.includes("0,00")) {
            format = moneyFormat.replace("0,00", (price/ 100).toFixed(2).replace('.', ','))
        } else if(moneyFormat.includes("0")) {
            let value = Number(moneyWithOutCurrency.replace("0", (price/ 100))).toFixed(0)
            format = moneyFormat.replace("0", value)
        }

        if(removeEach) {
            return format.replace("each", "")
        } else {
            return format
        }
    }

    function getSavedPriceLabel(priceAdjustments) {
        if(priceAdjustments && Array.isArray(priceAdjustments) && priceAdjustments.length) {
            let pa = priceAdjustments[0]
            if(pa.value_type === "percentage") {
                return `Save ${pa.value}%`
            } else {
                return `Save ${loopFormatMoney(pa.value, true)}`
            }
        } else {
            return ''
        }
    }

    function updateSellingPlanDescriptionUI ({ productId }) {
        let descriptionValue = ''
        let variant = findSelectedVariantLoop(productId)
        if(window.loopProps && window.loopProps[productId] && window.loopProps[productId].sellingPlanGroupId) {
            const { description } = window.loopProps[productId].sellingPlanDefination
            descriptionValue = description
            let descriptionElement = document.querySelector(`#loop-selling-plan-description-${ variant.id }-${ window.loopProps[productId].sellingPlanGroupId }`)
            if(descriptionElement) {
                descriptionElement.innerHTML = descriptionValue || ''
            }
            if(!descriptionValue && descriptionElement) {
                descriptionElement.classList.add('loop-display-none')
            } else if(descriptionValue) {
                descriptionElement.classList.remove('loop-display-none')
            }
        }

    }

    function updatePriceInParentElements ({ productId }) {
        let variant = findSelectedVariantLoop(productId)

        let displayPriceOfVariant = ''
        let price = 0, compareAtPrice = 0, perDeliveryPrice = 0, unitPrice = 0, subscriptionBadge = true, savedLabel = ''
        //selling plan selected
        if(window && window.loopProps && window.loopProps[productId].sellingPlanAllocation) {
            price = loopFormatMoney(window.loopProps[productId].sellingPlanAllocation.price, true)
            compareAtPrice = loopFormatMoney(window.loopProps[productId].sellingPlanAllocation.compare_at_price, true)
            subscriptionBadge = true
            perDeliveryPrice = loopFormatMoney(window.loopProps[productId].sellingPlanAllocation.per_delivery_price, true)
            unitPrice = 0
            savedLabel = getSavedPriceLabel(window.loopProps[productId].sellingPlanPriceAdjustments)
        } else {
            // variant's price
            price = loopFormatMoney(variant.price, true)
            compareAtPrice = loopFormatMoney(variant.compare_at_price)
            subscriptionBadge = false
            perDeliveryPrice = 0
            unitPrice = 0
        }

        loopPriceSelectors.map(selector => {
            let priceElement = null
            priceElement = document.querySelector(selector)
            if(priceElement) {
                if(subscriptionBadge) {
                    priceElement.innerHTML = `${price}`

                } else {
                    priceElement.innerHTML = `${price}`
                }
            }
        })
    }

    function updatePriceInUI({ productId }) {
        let variant = findSelectedVariantLoop(productId, window.loopProps[productId].selectedVariantId)
        let availableSellingPlanAllocations = variant && Array.isArray(variant.selling_plan_allocations) ? variant.selling_plan_allocations : []
        let moneyFormat = document.querySelector('#loop-price-money-format').innerHTML

        let sellingPlan = window.loopProps && window.loopProps[productId] ? window.loopProps[productId].sellingPlan : {}
        const product =  window.loopProps[productId]?.product || {}
        const { selling_plan_groups } = product
        const { selling_plan_allocations } = variant
        selling_plan_groups.map(spg => {
            let flag = false
            if(Array.isArray(spg.selling_plans) && spg.selling_plans.length) {
                let firstSellingPlan = spg.selling_plans[0]
                let sellingPlanAllcotion = selling_plan_allocations.find(a => Number(a.selling_plan_id) === Number(firstSellingPlan.id)) || {}
                const { selling_plan_group_id, per_delivery_price } = sellingPlanAllcotion
                let element = document.querySelector(`#loop-price-${variant.id}-${selling_plan_group_id}`)
                if(element) {
                    element.innerHTML = loopFormatMoney(per_delivery_price, true)
                }
            }

        })

        if(sellingPlan && sellingPlan.selling_plan_group_id) {
            const { selling_plan_group_id, per_delivery_price } = sellingPlan
            let element = document.querySelector(`#loop-price-${variant.id}-${selling_plan_group_id}`)
            if(element) {
                element.innerHTML = loopFormatMoney(per_delivery_price, true)
            }
        }

        let loopOneTimePrice = getLoopSubscriptionContainer(productId).querySelector('#loop-price-one-time')
        if(loopOneTimePrice) {
            loopOneTimePrice.innerHTML = loopFormatMoney(variant.price, true)
        }

    }
</script>

{%- endif -%}



